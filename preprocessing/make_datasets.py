import os
import pandas as pd


def main(path_to_excel_file, year_of_file):
    dir_year = os.path.join("..", "data", year_of_file)

    if not os.path.exists(dir_year):
        os.mkdir(dir_year)

    # P1
    df = pd.read_excel(path_to_excel_file, sheet_name='Р1')
    df = df[~df['Направления реализации государственной молодeжной политики'].str.startswith(' ')].copy()
    df.loc[df['Регион'] == 'Астраханская  область', 'Регион'] = 'Астраханская область'
    df = df[['Регион', 'Округ', 'Направления реализации государственной молодeжной политики', 'Бюджет СРФ, руб',
             'Кол-во грантов', 'Бюджет грантов, руб',
             'Численность молодeжи, задействованной в программных мероприятиях по направлению',
             'Количество детских и молодeжных общественных объединений, работающих по данному ']].copy()
    temp_df = pd.melt(df, id_vars=['Регион', 'Округ', 'Направления реализации государственной молодeжной политики'])
    temp_df.rename(columns={'variable': 'Показатель',
                            'value': 'Значение',
                            'Направления реализации государственной молодeжной политики': 'Направление реализации молодежной политики'},
                   inplace=True)
    features_mapper = {
        'Бюджет СРФ, руб': 'Бюджет субъекта РФ на мол. политику',
        'Кол-во грантов': 'Кол-во грантов',
        'Бюджет грантов, руб': 'Бюджет грантов',
        'Численность молодeжи, задействованной в программных мероприятиях по направлению': 'Численность молодeжи, задействованной в программных мероприятиях',
        'Количество детских и молодeжных общественных объединений, работающих по данному ': 'Кол-во детских и молодeжных общественных объединений'
    }
    direction_mapper = {
        'Вовлечение молодeжи в инновационную деятельность и научно-техническое творчество, в том числе:': 'Вовлечение молодeжи в инновационную деятельность и научно-техническое творчество',
        'Социализация молодeжи, нуждающейся в особой заботе государства': 'Социализация молодeжи, нуждающейся в особой заботе государства',
        'Вовлечение молодeжи в работу средств массовой информации (молодeжные медиа)': 'Вовлечение молодeжи в работу СМИ (молодeжные медиа)',
        'Содействие в подготовке и переподготовке специалистов в сфере государственной молодeжной политики': 'Содействие в подготовке и переподготовке специалистов в сфере гос. молодeжной политики',
        'Развитие международного и межрегионального молодeжного сотрудничества': 'Развитие международного и межрегионального молодeжного сотрудничества',
        "Работа с молодeжью, находящейся в социально-опасном положении": "Работа с молодeжью, находящейся в социально-опасном положении",
        "Вовлечение молодeжи в занятие творческой деятельностью": 'Вовлечение молодeжи в занятие творческой деятельностью',
        'Содействие профориентации и карьерным устремлениям молодeжи': 'Содействие профориентации и карьерным устремлениям молодeжи',
        'Поддержка и взаимодействие с общественными организациями и движениями': 'Поддержка и взаимодействие с общественными организациями и движениями',
        'Формирование у молодeжи семейных ценностей': 'Формирование у молодeжи семейных ценностей',
        'Патриотическое воспитание молодeжи, в том числе:': 'Патриотическое воспитание молодeжи',
        'Формирование российской идентичности, единства российской нации, содействие межкультурному и межконфессиональному диалогу': 'Формирование российской идентичности, единства российской нации, содействие межкультурному и межконфессиональному диалогу',
        'Вовлечение молодeжи в волонтeрскую деятельность': 'Вовлечение молодeжи в волонтeрскую деятельность',
        'Вовлечение молодeжи в здоровый образ жизни и занятия спортом, популяризация культуры безопасности в молодeжной среде': 'Вовлечение молодeжи в ЗОЖ и занятия спортом, популяризация культуры безопасности в молодeжной среде',
        'Развитие молодeжного самоуправления': 'Развитие молодeжного самоуправления'
    }
    temp_df['Показатель'] = temp_df['Показатель'].map(features_mapper)
    temp_df['Направление реализации молодежной политики'] = temp_df['Направление реализации молодежной политики'].map(
        direction_mapper)
    temp_df.to_parquet(f'../data/{year_of_file}/p1.parquet', index=False)

    # P2
    df = pd.read_excel(path_to_excel_file, sheet_name='Р2')
    df = df[~df['Наименование'].str.startswith(' ')].copy()
    df.loc[df['Регион'] == 'Астраханская  область', 'Регион'] = 'Астраханская область'
    temp_df = pd.melt(df.drop(['Год', '№ строки'], axis=1), id_vars=['Регион', 'Округ', 'Наименование'])
    feature_mapper = {
        'Кол-во структур, ед': 'Кол-во структур',
        'Всего кол-во сотрудников, чел': 'Кол-во сотрудников',
        'Всего с профильным образованием': 'Кол-во сотрудников с профильным образованием',
        'Всего объeм финансирования, руб': 'Объeм финансирования',
        'Расходы на мероприятия': 'Расходы на мероприятия',
        'Расходы на адм функции': 'Расходы на административные функции',
        'Расходы на ремонт': 'Расходы на ремонт'
    }
    structure_mapper = {
        'Региональные структуры по работе с молодeжью, в том числе:': 'Региональные структуры по работе с молодeжью',
        'Муниципальные структуры по работе с молодeжью, в том числе:': 'Муниципальные структуры по работе с молодeжью'
    }
    temp_df['Наименование'] = temp_df['Наименование'].map(structure_mapper)
    temp_df['variable'] = temp_df['variable'].map(feature_mapper)
    temp_df.rename(columns={'Наименование': 'Структура по работе с молодежью',
                            'variable': 'Показатель',
                            'value': 'Значение'}, inplace=True)
    temp_df.to_parquet(f'../data/{year_of_file}/p2.parquet', index=False)

    # P3
    df = pd.read_excel(path_to_excel_file, sheet_name='Р3')
    df.loc[df['Регион'] == 'Астраханская  область', 'Регион'] = 'Астраханская область'
    df = df.drop(['Год', '№ строки'], axis=1).copy()
    feature_mapper = {
        'Численость уникальных пользователей, посетивших официальный сайт регионального органа исполнительной власти, реализующего государственную молодeжную политику': 'Число уникальных пользователей, посетивших сайт рег. органа исп. власти, реализующего гос. мол. политику',
        'Количество просмотров официального сайта органа исполнительной власти, реализующего государственную молодeжную политику': 'Кол-во просмотров сайта органа исп. власти, реализующего гос. мол. политику',
        'Финансирование информационного освещения реализации государственной молодeжной политики': 'Финансирование информационного освещения реализации гос. мол. политики',
        'Количество статей, опубликованных в главном правительственном печатном издании субъекта Российской Федерации о реализации государственной молодeжной политики в регионе': 'Кол-во статей, опубликованных в правительственном печатном издании субъекта РФ о реализации гос. мол. политики в регионе',
        '      в печатных средствах массовой информации': 'Кол-во упоминаний рег. органа исп. власти, реализующего гос. мол. политику, в печатных СМИ',
        '      в интернет-СМИ': 'Кол-во упоминаний рег. органа исп. власти, реализующего гос. мол. политику, в интернет-СМИ',
        '      ТВ-сюжетов': 'Кол-во ТВ-сюжетов о рег. органе исп. власти, реализующего гос. мол. политику',
        'Количество статей, опубликованных региональным органом исполнительной власти, реализующим государственную молодeжную политику, направленных пресс-службой федерального органа исполнительной власти, осуществляющего функции по оказанию государственных услуг и управлению государственным имуществом в сфере государственной молодeжной политики': 'Количество статей, опубликованных рег. органом исп. власти, реализующим гос. мол. политику, направленных пресс-службой федерального органа исп. власти',
        'Численность подписчиков / участников сообществ регионального органа исполнительной власти, реализующего государственную молодeжную политику в социальных сетях': 'Число подписчиков сообществ рег. органа исп. власти, реализующего гос. мол. политику в соц. сетях',
        'Количество публикаций в сообществах регионального органа исполнительной власти, реализующего государственную молодeжную политику в социальных сетях': 'Кол-во публикаций в сообществах рег. органа исп. власти, реализующего гос. мол. политику в соц. сетях',
        'Количество новостей, опубликованных от региона на официальном сайте федерального органа исполнительной власти, осуществляющего функции по оказанию государственных услуг и управлению государственным имуществом в сфере государственной молодeжной политики': 'Кол-во новостей, опубликованных от региона на сайте федерального органа исп. власти'
    }
    df['Показатель'] = df['Показатель'].map(feature_mapper)
    df = df[df['Показатель'].notna()].copy()
    df.drop('Единица измерения', axis=1).to_parquet(f'../data/{year_of_file}/p3.parquet', index=False)

    # P4
    df = pd.read_excel(path_to_excel_file, sheet_name='Р4')
    df.loc[df['Регион'] == 'Астраханская  область', 'Регион'] = 'Астраханская область'
    temp_df = pd.melt(df.drop(['Год', '№ строки', 'Unnamed: 13', 'Unnamed: 14', 'Unnamed: 15'], axis=1),
                      id_vars=['Регион', 'Округ', 'Наименование'])
    name_mapper = {
        'Общественные объединения, включенные в реестр детских и молодeжных объединений, пользующихся государственной поддержкой': 'Общ. объединения, включенные в реестр дет. и мол. объединений, пользующихся гос. поддержкой',
        'Объединения, включенные в перечень партнеров органа исполнительной власти, реализующего государственную молодeжную политику / работающего с молодeжью (исключая ситуации, включенные в реестр согласно Федеральному закону № 98-ФЗ)': 'Объединения, включенные в перечень партнеров органа исп. власти, реализующего гос. мол. политику',
        'Политические молодeжные общественные объединения': 'Политические молодeжные общ. объединения',
        'Молодeжные патрули / добровольные молодeжные дружины': 'Молодeжные патрули / добровольные молодeжные дружины'
    }
    feature_mapper = {
        'Кол-во рег. объединений, ед': 'Кол-во рег. объединений',
        'Кол-во мест. объединений, ед': 'Кол-во мест. объединений',
        'Число членов мест. объединений, чел': 'Число членов мест. объединений',
        'Число членов рег. объединений, чел': 'Число членов рег. объединений',
        'Число уч-в мер-й рег. объединений, чел': 'Число участников мероприятий рег. объединений',
        'Число уч-в мер-й мест. объединений, чел': 'Число участников мероприятий мест. объединений',
        'Объeм фин.поддержки рег. объединений, руб': 'Объeм фин. поддержки рег. объединений',
        'Объeм фин.поддержки мест. объединений, руб': 'Объeм фин. поддержки мест. объединений'
    }
    temp_df['variable'] = temp_df['variable'].map(feature_mapper)
    temp_df['Наименование'] = temp_df['Наименование'].map(name_mapper)
    temp_df.rename(columns={'Наименование': 'Молодежное объединение',
                            'variable': 'Показатель',
                            'value': 'Значение'}, inplace=True)
    temp_df.to_parquet(f'../data/{year_of_file}/p4.parquet', index=False)

    # P4-2
    df = pd.read_excel(path_to_excel_file, sheet_name='Р4-2')
    df.loc[df['Регион'] == 'Астраханская  область', 'Регион'] = 'Астраханская область'
    temp_df = pd.melt(df.drop(['Год', '№ строки', 'Наименование'], axis=1), id_vars=['Регион', 'Округ'])
    feature_mapper = {
        'Кол-во общ.объед.школ': 'Кол-во общ. объединений в школах',
        'Кол-во общ.объед.СПО': 'Кол-во общ. объединений в колледжах',
        'Кол-во общ.объед.вузов': 'Кол-во общ. объединений в ВУЗах',
        'Число уч-в общ.объед.школ': 'Число участников общ. объединений в школах',
        'Число уч-в общ.объед.СПО': 'Число участников общ. объединений в колледжах',
        'Число уч-в общ.объед.вузов': 'Число участников общ. объединений в ВУЗах'
    }
    temp_df['variable'] = temp_df['variable'].map(feature_mapper)
    temp_df.rename(columns={'variable': 'Показатель', 'value': 'Значение'}, inplace=True)
    temp_df.to_parquet(f'../data/{year_of_file}/p4-2.parquet', index=False)

    # P6
    df = pd.read_excel(path_to_excel_file, sheet_name='Р6')
    df.loc[df['Регион'] == 'Астраханская  область', 'Регион'] = 'Астраханская область'
    temp_df = pd.melt(df[df['Наименование'] != 'Всего'].drop(['Год', '№ строки'], axis=1),
                      id_vars=['Регион', 'Округ', 'Наименование'])
    feature_mapper = {
        'Количество форумов соответствующего уровня, прошедших на территории субъекта Рос': 'Кол-во форумов',
        'Численность участников форумов соответствующего уровня, чел': 'Число участников форумов',
        'Объeм рег. финансирования (в том числе посредством финансирования транспортных и': 'Объем регионального финансирования форумов',
        'Объeм мун. финансирования (в том числе посредством финансирования транспортных и': 'Объeм муниципального финансирования'
    }
    temp_df['variable'] = temp_df['variable'].map(feature_mapper)
    temp_df.rename(columns={'Наименование': 'Вид форума', 'variable': 'Показатель', 'value': 'Значение'}, inplace=True)
    temp_df.to_parquet(f'../data/{year_of_file}/p6.parquet', index=False)

    # P7
    df = pd.read_excel(path_to_excel_file, sheet_name='Р7')
    df.loc[df['Регион'] == 'Астраханская  область', 'Регион'] = 'Астраханская область'
    n_strings_to_use = [60, 61, 69]
    n_strings_to_use_2 = [70, 71, 72, 73]
    n_strings_to_use_3 = [i for i in range(74, 91)]
    df_1 = df[df['№ строки'].isin(n_strings_to_use)].copy()
    feature_mapper = {
        'Общее количество региональных ресурсных центров поддержки добровольчества на территории субъекта Российской Федерации:': 'Кол-во рег. ресурсных центров поддержки добровольчества',
        'Количество государственных учреждений на территории субъекта Российской Федерации, работающих с добровольцами (волонтерами) и реализующих совместные программы в следущих сферах:': 'Кол-во гос. учреждений, работающих с добровольцами/волонтерами',
        'Общая численность граждан, вовлеченных центрами (сообществами, объединениями) поддержки добровольчества (волонтерства) на базе образовательных организаций, некоммерческих организаций, государственных и муниципальных учреждений в добровольческую (волонтерскую) деятельность на территории субъекта Российской Федерации, в том числе:': 'Число граждан, вовлеченных центрами поддержки добровольчества'
    }
    df_1['Показатель'] = df_1['Показатель'].map(feature_mapper)
    df_1.drop(['Год', '№ строки', 'Единица измерения'], axis=1).to_parquet(f'../data/{year_of_file}/p7-1.parquet',
                                                                           index=False)

    df2 = df[df['№ строки'].isin(n_strings_to_use_2)].copy()
    feature_mapper = {
        '      добровольцы (волонтеры) в возрасте от 7 до 13 лет': 'От 7 до 13 лет',
        '      добровольцы (волонтеры) в возрасте от 14 до 30 лет': 'От 14 до 30 лет',
        '      добровольцы (волонтеры) в возрасте от 31 до 54 лет': 'От 31 до 54 лет',
        '      добровольцы (волонтеры) «серебряного» возраста (55 лет и старше)': '55 лет и старше'
    }
    df2['Показатель'] = df2['Показатель'].map(feature_mapper)
    df2.drop(['Год', '№ строки', 'Единица измерения'], axis=1).to_parquet(f'../data/{year_of_file}/p7-2.parquet',
                                                                          index=False)

    df3 = df[df['№ строки'].isin(n_strings_to_use_3)].copy()
    feature_mapper = {
        'Общая численность граждан, вовлеченных в добровольческую деятельность на территории субъекта Российской Федерации, включая вовлеченных центрами (сообществами, объединениями) поддержки добровольчества (волонтерства), по направлениям сферы деятельности: добровольческая (волонтерская) деятельность в области образования': 'Образование',
        '      добровольчество (волонтерство) в сфере гражданско-патриотического воспитания': 'Гражданско-патриотическое воспитание',
        '      добровольчество (волонтерство) в сфере здравоохранения': 'Здравоохранение',
        '      добровольчество (волонтерство) в сфере социальной поддержки и социального обслуживания населения': 'Соц. поддержка и соц. обслуживание населения',
        '      добровольчество (волонтерство) в сфере культуры': 'Культура',
        '      добровольчество (волонтерство) в сфере охраны природы': 'Охрана природы',
        '      добровольчество (волонтерство) в сфере развития городской среды и туристической деятельности': 'Развитие городской среди и турист. деятельности',
        '      добровольчество (волонтерство) в сфере предупреждения и ликвидации последствий чрезвычайных ситуаций': 'Предупреждение и ликвидация последствий чрезвычайных ситуаций',
        '      добровольчество (волонтерство) в сфере содействия в поиске пропавших людей, содействия органам внутренних дел и иным правоохранительным органам в охране общественного порядка в добровольных народных дружинах': 'Содействие в поиске пропавших людей, содействие правоохранительным органам',
        '      добровольчество (волонтерство) в сфере обеспечения доступности правовой поддержки населения': 'Обеспечение доступности правовой поддержки населения',
        '      добровольчество (волонтерство) в сфере финансового просвещения': 'Финансовое просвещение',
        '      добровольчество (волонтерство) по месту жительства': 'Добровольчество по месту жительства',
        '      инклюзивное добровольчество (волонтерство)': 'Инклюзивное добровольчество',
        '      добровольчество (волонтерство) граждан в возрасте 55 лет и старше': 'Добровольчество граждан в возрасте 55 лет и старше',
        '      добровольчество (волонтерство), реализуемое в семейных формах': 'Добровольчество, реализуемое в семейных формах',
        '      корпоративное добровольчество (волонтерство)': 'Корпоративное добровольчество',
        '      добровольчество (волонтерство) в сфере физической культуры и спорта': 'Физическая культура и спорт'
    }
    df3['Показатель'] = df3['Показатель'].map(feature_mapper)
    df3 = df3.drop(['Год', '№ строки', 'Единица измерения'], axis=1).copy()
    df3['Значение'] = df3['Значение'].fillna(0)
    df3.to_parquet(f'../data/{year_of_file}/p7-3.parquet', index=False)


if __name__ == "__main__":
    main('../init_data/Форма М1 2021.xlsx', '2021')
